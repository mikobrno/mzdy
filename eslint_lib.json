[{"filePath":"D:\\Projekty\\mzdy\\src\\lib\\apollo.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[358,361],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[358,361],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[535,538],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[535,538],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Shim for legacy apollo client. Project migrated to Supabase;\r\n// keep this file as a harmless stub to avoid bundler errors while\r\n// we remove all Apollo usages.\r\n\r\nexport const apolloClient = {\r\n  // minimal stub methods if any consumer calls them\r\n  // accept optional args so callers using apolloClient.query({...}) type-check\r\n  query: async (_opts?: any) => {\r\n    // reference the argument so linters don't flag it as unused; callers may pass options\r\n    void _opts\r\n    return { data: null }\r\n  },\r\n  mutate: async (_opts?: any) => {\r\n    void _opts\r\n    return { data: null }\r\n  },\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\Projekty\\mzdy\\src\\lib\\auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\Projekty\\mzdy\\src\\lib\\db.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\Projekty\\mzdy\\src\\lib\\graphql-queries.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":4,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[180,183],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[180,183],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[223,226],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[223,226],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[265,268],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[265,268],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[313,316],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[313,316],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[363,366],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[363,366],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[411,414],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[411,414],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[458,461],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[458,461],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[506,509],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[506,509],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[547,550],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[547,550],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[586,589],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[586,589],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[630,633],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[630,633],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[674,677],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[674,677],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[717,720],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[717,720],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[767,770],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[767,770],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Legacy GraphQL queries were removed in favor of Supabase.\r\n// Keep named exports so older imports resolve until all modules are migrated.\r\n\r\nexport const GET_SVJ_LIST = null as any\r\nexport const GET_SVJ_DETAIL = null as any\r\nexport const GET_EMPLOYEES = null as any\r\nexport const GET_EMPLOYEE_DETAIL = null as any\r\nexport const GET_SVJ_WITH_PAYROLLS = null as any\r\nexport const GET_PAYROLL_SUMMARY = null as any\r\nexport const GET_PAYROLL_DETAIL = null as any\r\nexport const GET_DASHBOARD_STATS = null as any\r\n\r\nexport const CREATE_SVJ = null as any\r\nexport const UPDATE_SVJ = null as any\r\nexport const CREATE_EMPLOYEE = null as any\r\nexport const UPDATE_EMPLOYEE = null as any\r\nexport const CREATE_PAYROLL = null as any\r\nexport const UPDATE_PAYROLL_STATUS = null as any\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\Projekty\\mzdy\\src\\lib\\nhost.ts","messages":[{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":1,"column":1,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":1,"endColumn":14,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[0,13],"text":"// @ts-expect-error"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// @ts-ignore\r\nimport { NhostClient } from '@nhost/nhost-js';\r\n\r\nconst nhost = new NhostClient({\r\n  subdomain: 'sthlcibuwuamdyqoowmm',\r\n  region: 'eu-central-1',\r\n});\r\n\r\nexport { nhost };\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\Projekty\\mzdy\\src\\lib\\rpc.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\Projekty\\mzdy\\src\\lib\\storage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\Projekty\\mzdy\\src\\lib\\supabase.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\Projekty\\mzdy\\src\\lib\\utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\Projekty\\mzdy\\src\\lib\\validation.ts","messages":[{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\/.","line":6,"column":23,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":6,"endColumn":24,"suggestions":[{"messageId":"removeEscape","fix":{"range":[233,234],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[233,233],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Czech bank account & birth number formatting and validation\r\n\r\nexport function formatBankAccount(input: string): string {\r\n  let v = (input || '').replace(/\\s+/g, '')\r\n  // allow only digits, dash and slash\r\n  v = v.replace(/[^0-9\\/-]/g, '')\r\n  // ensure only one slash\r\n  const parts = v.split('/')\r\n  if (parts.length > 2) {\r\n    v = parts.slice(0, 2).join('/')\r\n  }\r\n  // ensure only one dash in the prefix part\r\n  const [accPart, bankPart] = v.split('/')\r\n  if (accPart && accPart.includes('-')) {\r\n    const idx = accPart.indexOf('-')\r\n    const rest = accPart.slice(idx + 1).replace(/-/g, '')\r\n    v = accPart.slice(0, idx + 1) + rest + (bankPart !== undefined ? '/' + bankPart : '')\r\n  }\r\n  return v\r\n}\r\n\r\nexport function isValidBankAccount(value: string): boolean {\r\n  if (!value) return false\r\n  const v = value.replace(/\\s+/g, '')\r\n  // prefix (0-6 digits + '-') optional, base 2-10 digits, bank code 4 digits\r\n  const re = /^(\\d{0,6}-)?\\d{2,10}\\/\\d{4}$/\r\n  return re.test(v)\r\n}\r\n\r\nexport function formatBirthNumber(input: string): string {\r\n  const digits = (input || '').replace(/\\D/g, '')\r\n  if (digits.length <= 6) return digits\r\n  return `${digits.slice(0, 6)}/${digits.slice(6, 10)}`\r\n}\r\n\r\nexport function isValidBirthNumber(value: string): boolean {\r\n  if (!value) return false\r\n  const digits = value.replace(/\\D/g, '')\r\n  if (digits.length !== 9 && digits.length !== 10) return false\r\n\r\n  // basic date plausibility\r\n  let mm = parseInt(digits.slice(2, 4), 10)\r\n  const dd = parseInt(digits.slice(4, 6), 10)\r\n  // female +50 months, special cases +20/+70 ignored here\r\n  if (mm > 50) mm -= 50\r\n  if (mm < 1 || mm > 12) return false\r\n  if (dd < 1 || dd > 31) return false\r\n\r\n  // modulus check for 10-digit numbers (since 1.1.1954)\r\n  if (digits.length === 10) {\r\n    const num = BigInt(digits)\r\n    if (num % 11n !== 0n) return false\r\n  }\r\n  return true\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]
